name: workshop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

env:
  URL_GITLEAKS_RELEASE: 'https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz'
  DIR_DOCKERFILE: './src/ConsoleAppJobNotificacaoHttp'
  DIR_DEVOPS_ARTIFACTS: './devops'

jobs:
  secrets_scanning:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Instalar o Gitleaks
        run: |
          mkdir tmp-gitleaks
          cd tmp-gitleaks
          echo ''
          echo "Url utilizada para download do Gitleaks: ${{ env.URL_GITLEAKS_RELEASE }}"
          echo ''
          curl -L -o gitleaks.tar.gz ${{ env.URL_GITLEAKS_RELEASE }}
          tar -xvzf gitleaks.tar.gz
          ls
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
          cd ..
          rm -rf tmp-gitleaks

      - name: Testar o Gitleaks
        run: |
          gitleaks --version
          echo ''
          gitleaks --help

      - name: Criar diretório results
        run: mkdir results

      - name: Executar o Gitleaks no repositório
        run: |
          curl -L -o ./results/report-basic.tmpl https://raw.githubusercontent.com/gitleaks/gitleaks/refs/heads/master/report_templates/basic.tmpl
          gitleaks dir . \
            --report-format=sarif \
            --report-path=./results/results-secrets.sarif

      - name: Exibir conteúdo do diretório results
        if: always()
        run: |
          cd results
          pwd
          ls -l

      - name: Upload arquivo SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./results/results-secrets.sarif
          category: sast-tools
          
  dockerfile_scanning:
    needs: secrets_scanning
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Instalar o Checkov via pip
        run: pip install checkov

      - name: Testar a instalação do Checkov
        run: |
          checkov
          checkov --help

      - name: Criar diretório results
        run: mkdir results

      - name: Executar análise com o Checkov
        run: |
          echo 'Vulnerabilidades que serao ignoradas ao executar o Checkov:'
          echo '* CKV_DOCKER_2 - Ensure that HEALTHCHECK instructions have been added to container images'
          echo '* CKV_DOCKER_3 - Ensure that the image is not built from a local context'
          echo
          checkov -d ${{ env.DIR_DOCKERFILE }} \
                  --framework dockerfile \
                  --skip-check CKV_DOCKER_2,CKV_DOCKER_3 \
                  -o cli -o sarif \
                  --output-file-path ./results/results-dockerfile.sarif

      - name: Exibir arquivos gerados em /results
        if: always()
        run: |
          cd results
          pwd
          echo
          echo
          ls -l

      - name: Upload arquivo SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./results/results-dockerfile.sarif
          category: sast-tools

  kubernetes_yaml_scanning:
    needs: dockerfile_scanning
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Instalar o Checkov via pip
        run: pip install checkov

      - name: Testar a instalação do Checkov
        run: |
          checkov
          checkov --help

      - name: Criar diretório results
        run: mkdir results

      - name: Executar análise com o Checkov
        run: |
          echo 'Vulnerabilidades que serao ignoradas ao executar o Checkov:'
          echo '* CKV_K8S_21 - The default namespace should not be used'
          echo '* CKV_K8S_22 - Use read-only filesystem for containers where possible'
          echo '* CKV_K8S_23 - Minimize the admission of root containers'
          echo '* CKV_K8S_28 - Minimize the admission of containers with the NET_RAW capability'
          echo '* CKV_K8S_29 - Apply security context to your pods and containers'
          echo '* CKV_K8S_30 - Apply security context to your containers'
          echo '* CKV_K8S_31 - Ensure that the seccomp profile is set to docker/default or runtime/default'
          echo '* CKV_K8S_37 - Minimize the admission of containers with capabilities assigned'
          echo '* CKV_K8S_38 - Ensure that Service Account Tokens are only mounted where necessary'
          echo '* CKV_K8S_40 - Containers should run as a high UID to avoid host conflict'
          echo '* CKV_K8S_43 - Image should use digest'
          echo '* CKV_K8S_71 - Ensure that the --kubelet-https argument is set to true'
          echo
          checkov -d ${{ env.DIR_DEVOPS_ARTIFACTS }} \
                  --framework kubernetes \
                  --skip-check CKV_K8S_21,CKV_K8S_22,CKV_K8S_23,CKV_K8S_28,CKV_K8S_29,CKV_K8S_30,CKV_K8S_31,CKV_K8S_37,CKV_K8S_38,CKV_K8S_40,CKV_K8S_43,CKV_K8S_71 \
                  -o cli -o sarif \
                  --output-file-path ./results/results-kubernetes.sarif

      - name: Exibir arquivos gerados em /results
        if: always()
        run: |
          cd results
          pwd
          echo
          echo
          ls -l

      - name: Upload arquivo SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./results/results-kubernetes.sarif
          category: sast-tools

  build:
    needs: kubernetes_yaml_scanning
    runs-on: ubuntu-latest
 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
